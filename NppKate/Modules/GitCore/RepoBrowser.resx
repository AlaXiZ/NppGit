<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ilImages.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ilImages.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADC
        CwAAAk1TRnQBSQFMAgEBBgEAAWABAAFgAQABEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABIAMAAQEBAAEgBgABIP8AHwADGgElA1kBtgNdAcEDKQE+MAADGgEkAWABWgFRAbMBaQFgAVABvwMn
        ATuwAANdAcADRgF/AzgBXANvAegDAQECLAABaAFfAVEBvQFFAkQBewI2ATUBWAGmAXgBNgHmAwABAawA
        A2QB0gMtAUUDFAEcA3cB9gMEAQYsAAF9AWgBSQHQAysBQgMTARoBzgGFARoB9AMDAQSsAAMyAVADdwH3
        A3cB9wNfAcUDBgEILAACMQEwAU0B0gGFARcB9QHTAYcBFgH2AW0BYAFNAcIDBQEHsAADbgHpA4AB/wOA
        Af8DdwH5A28B5wNYAa8DHwEtJAABqQF4ATMB5wH/AZQBAAL/AZQBAAH/AdsBiQEWAfcBpQF5ATcB5QFd
        AVgBUQGtAx0BKqQAA24B6QOAAf8DZAHSA4AB/QOAAf8DgAH/A3QB8QMZASMgAAGpAXgBMwHnAf8BlAEA
        Af8BfAFoAUwBzwHzAZQBBAH9Af8BlAEAAv8BlAEAAf8BuwF/ASUB7wMYASGgAANuAekDgAH/Aw0BEQMF
        AQcDFgEfA1kBtgOAAf8DUQGbIAABqQF4ATMB5wH/AZQBAAH/AwsBDwMEAQUDFQEdAWABWgFRAbMB/wGU
        AQAB/wFRAVABTQGZoAADbgHpA4AB/wMNAREIAAMdASkDgAH/A2gB2yAAAakBeAEzAecB/wGUAQAB/wML
        AQ8IAAMcAScB/wGUAQAB/wGLAW4BQwHZoAADbgHpA4AB/wMNAREIAAM+AWoDgAH9A3cB+QMtAUYcAAGp
        AXgBMwHnAf8BlAEAAf8DCwEPCAACPQE8AWcB6wGIAQQB/AHeAYoBFAH4AywBRJwAA24B6QOAAf8DDQER
        BAADBAEFA3cB9AMaASUDMQFNA2QBzxwAAakBeAEzAecB/wGUAQAB/wMLAQ8EAAMDAQQByQGEASEB8gMZ
        ASMDLwFKAXgBZAFMAc2YAAMyAVADdwH3A3cB9wNCAXYEAAMCAQMDcgHsAzEBTgNBAXIDXgHEGAACMQEw
        AU0B0gGFARcB9QHTAYcBFgH2AkIBQQFzBAADAQECAa4BewEwAeoDLwFKAkABPwFvAW0BYAFNAcKYAANk
        AdIDLQFFAxQBHAN3AfYDBAEGBAADLgFIA2QB0ANfAcUDHwEtGAABfQFoAUkB0AMrAUIDEwEaAc4BhQEa
        AfQDAwEEBAADLQFFAXgBZAFMAc0BbQFgAU0BwgMeASuYAANdAcADRgF+AzgBXANvAegDAQECLAABaAFf
        AVEBvQFFAkQBewI2ATUBWAGmAXgBNgHmAwABAawAAxoBJQNZAbYDXQHBAykBPjAAAxoBJAFgAVoBUQGz
        AWkBYAFQAb8DJwE7/wD/AP8AcwADHAEoAWUBXQFaAbkBcAFjAV8BxQMqAUEwAAMMARADEwEaAxMBGgMT
        ARoDEwEaAxMBGgMTARoDEwEaAxMBGgMOAROYAAFvAWEBXgHEAUkCSAGDAzoBYQG0AX0BcQHrAwIBAywA
        AxcBIANCAXQDSgGKA0oBigNKAYsDSgGMA0oBjANKAYsDQgF0AxoBJRwAAyIBMgFgAVwBWQHPAXABYQFQ
        AeQDNwFaAxYBHwMZASMDEQEXAwYBCAMAAQFYAAGEAW0BZAHWAy8BSQMWAR8B4AGMAXQB+QMGAQgwAANE
        AXwD5gH/A8QB/wKzAbEB/wGdAaUBlAH/Aa8BvQGqAf8B0QHfAc8B/wNFAX4gAAMTARoBhgF0AU0B6wH0
        AbQBDgH/AzIBUQQAAwcBCQQAAwIBAwMAAQFYAAMzAVMB3gGHAXsB+AHgAYwBdAH5AXQBZQFiAckDBwEK
        MAADPwFvA+oB/wPZAf8BzAHLAckB/wG3AbkBrgH/AcIBygG7Af8B2QHjAdUB/wNBAXIgAAMQARYBfQFs
        AU8B6QH8AbYBCQH/Ak4BTQGVBAADCgEOAygBPQMBAQJgAAG1AXwBcgHsAf8BkgF7Av8BkgF7Af8B4wGG
        AXsB+gGuAXoBbwHqAWABWgFYAbMDIAEvJAADIwE0A1YBtAOYAf8DgwH/A3EB/wOHAf8DVwG4AyUBNyAA
        AxEBFwF8AWwBUAHqAf8BvQEUAf8BoAGAATcB9QJJAUgBiAMvAUoBZgFhAVkB2gM4AV5gAAG1AXwBcgHs
        Af8BkgF7Af8BhwFqAWYB1wH3AYsBfwH+Af8BkgF7Av8BkgF7Af8ByQGDAXcB8gMbASYgAAM8AWYD5gH/
        A8QB/wG0AbIBsQH/AaQBogGYAf8BuwG8AbAB/wLeAdUB/wM/AWwgAAMRARcBhQFzAVUB7AHKAaMBPQH8
        AaQBhAFCAfUB5QGpATIB/wGsAYUBPgH4AbcBjgFBAfkBlAF7AVEB8QM4AV5cAAG1AXwBcgHsAf8BkgF7
        Af8DDwEUAwcBCQMZASMBZQFdAVoBuQH/AZIBewH/AVMCUQGfIAADPAFmA+oB/wPZAf8BzQHKAckB/wG/
        AbgBsgH/Ac8ByQHCAf8B5wHiAdwB/wM/AWwgAAMQARYBiwF5AVcB7gG7AZgBZAH5AlYBVQGxAV0BXAFa
        Ac0BmgGAAUwB8wG3AZABTAH5AZUBfwFTAfEDOAFeXAABtQF8AXIB7AH/AZIBewH/Aw8BFAgAAx8BLQH/
        AZIBewH/AZQBbgFoAd8gAAMjATMDVgGzA5gB/wODAf8DcQH/A4cB/wNXAboDJQE3HAADAwEEAx8BLQF8
        AXABYQHmAfEBvwFpAf8DOgFhAxIBGQMpAT4BagFjAVoB2wM4AV5gAAG1AXwBcgHsAf8BkgF7Af8DDwEU
        CAADQAFvAfcBiwF/Af4B4wGGAXsB+gMvAUocAAM8AWYD5gH/A8QB/wG1ArEB/wGtAZ4BnAH/AcgBugG4
        Af8B6wHeAd0B/wM/AWwcAAMeASsBXwFcAVkBzAHKAaYBcQH6AdMBuQF4AfwBcwFoAVoB4gMxAU0DAQEC
        AyoBQAMBAQJgAAG1AXwBcgHsAf8BkgF7Af8DDwEUBAADBQEHAdsBiQF0AfcDHQEpAzMBUgF/AWoBYgHT
        HAADPAFmA+oB/wPZAf8BzgLJAf8BxwK1Af8B2gLIAf8B8wLiAf8DPwFsIAADLwFJAX0BcwFhAeYBzwGm
        AV8B+wNCAXQDAQECAwEBAgQAAwEBAlwAAzMBUwHgAYwBdAH5AeABjAF0AfkBRQJEAXsEAAMDAQQBuwF8
        AXIB7gMzAVIDQwF3AXUBZAFgAcgcAAMxAU0DPAFmAzwBZgM8AWYDPAFmAzwBZgM8AWYDMQFNHwABAQQA
        AzEBTgI+AT0BagMAAQEHAAEBAwIBA2AAAYQBbQFkAdYDLwFJAxYBHwHgAYwBdAH5AwYBCAQAAzABSwF/
        AWoBYgHTAXUBZAFgAcgDIQEw2AABbwFhAV4BxAFJAkgBgwM6AWEBtAF9AXEB6wMCAQPsAAMcASgBZQFd
        AVoBuQFwAWMBXwHFAyoBQf8AJQABQgFNAT4HAAE+AwABKAMAAUADAAEgAwABAQEAAQEGAAEBFgAD/wEA
        BP8EAAHhAf8B4QH/BAAB4AH/AeAB/wQAAeAB/wHgAf8EAAHgAf8B4AH/BAAB8AEfAfABHwQAAfABDwHw
        AQ8EAAHwAQ8B8AEPBAAB8QGPAfEBjwQAAfEBhwHxAYcEAAHxAQcB8QEHBAAB4QEHAeEBBwQAAeABhwHg
        AYcEAAHgAf8B4AH/BAAB4QH/AeEB/wQABP8EAA7/AeEB/wHgAQcE/wHgAf8B4AEHAfABBwL/AeAB/wHw
        AQ8B8AGnAv8B4AH/AfABDwHwAY8C/wHwAR8B8AEPAfABDwL/AfABDwHwAQ8B8AEHAv8B8AEPAfABDwHw
        AQcC/wHxAY8B8AEPAeABDwL/AfEBhwHwAQ8B4AEPAv8B8QEHAfABDwHwAS8C/wHhAQcB8AEPAegBnwL/
        AeABhwb/AeAH/wHhCf8L
</value>
  </data>
</root>